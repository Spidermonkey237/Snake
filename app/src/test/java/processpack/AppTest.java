/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package processpack;




//-------------------------------------------
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
//-------------------------------------------------
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


class AppTest {
    
    public AL al;
	List<Point> snakeCoordinate;
	
	@BeforeEach
	public void setup() {
		al=new AL();
	    snakeCoordinate = new ArrayList<>() ;
	} 
	
	@AfterEach
	public void tearDown() {
		al=null; 
		snakeCoordinate=null;
	}
	
	//the size of a block must be 20
	@Test
	void testGetBlockSize() {
		assertEquals(20, al.getBlockSize(),"the bock size must be "+ 20);
	}
	
	//WidthB and HeigthB must be 30
	@Test
	void testWidthB_heightB() {
		 
		 assertEquals(30, al.getWidthB(),"WidthB must be "+ 30);
		 assertEquals(30, al.getHeigthB(),"HeightB must be "+ 30);
	}
	
    //Test for SetDir. "dir" is a variable that saves the index to browse the DirX and DirY array.
	//Therefore it must have values between 0(included) and 3(included).
	@Test
	void testSetDir() {
		al.setDir(1);
		assertEquals(1, al.getDir(),"Expecting 1 but received: "+al.getDir() );
		al.setDir(2000);
		assertEquals(1, al.getDir(),"Expecting 1 but received: "+al.getDir() );
		al.setDir(3);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
		al.setDir(4);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
		al.setDir(-2);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
	}
	
	//This test is used to determine if the snake's movement is legitimate. For example, 
	//if the snake's direction is upward then it cannot have a downward direction on the next action.
	@Test
	void testAvoidTurningBack() {
		 //down,up,right,left
		
		//while going down, cannot go up
		al.setDir(0);
		al.avoidTurningBack(1);
		assertEquals(0, al.getDir(),"Expecting 0 but received: "+al.getDir() );
		//while going up, go right
		al.avoidTurningBack(2);
		assertEquals(2, al.getDir(),"Expecting 2 but received: "+al.getDir() );
		//while going right, cannot go left
		al.avoidTurningBack(3);
		assertEquals(2, al.getDir(),"Expecting 2 but received: "+al.getDir() );
		//while going right, go up
		al.avoidTurningBack(1);
		assertEquals(1, al.getDir(),"Expecting 1 but received: "+al.getDir() );
		//while going up cannot go down
		al.avoidTurningBack(0);
		assertEquals(1, al.getDir(),"Expecting 1 but received: "+al.getDir() );
		//while going up, go Left
		al.avoidTurningBack(3);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
		//while going left, cannot go right
		al.avoidTurningBack(2);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
		//while going left, go up
		al.avoidTurningBack(1);
		assertEquals(1, al.getDir(),"Expecting 1 but received: "+al.getDir() );
		//while going up, cannot go down
		al.avoidTurningBack(0);
		assertEquals(1, al.getDir(),"Expecting 1 but received: "+al.getDir() );
		//while going up, go left
		al.avoidTurningBack(3);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
		//while going left, cannot going right
		al.avoidTurningBack(2);
		assertEquals(3, al.getDir(),"Expecting 3 but received: "+al.getDir() );
		//while going left, go down
		al.avoidTurningBack(0);
		assertEquals(0, al.getDir(),"Expecting 0 but received: "+al.getDir() );
		
	}

	//This test checks if the method randomPointwithexclusion returns an object point
	//which is not equal to a point belonging to the snake.
	@Test
	void testRandomCoordinateWithExclusion() {
		
		for(int i=0;i<30;i++) {
			  for(int j=2;j<30;j++) {
					  snakeCoordinate.add(new Point(i,j));
			  }
		  }
		
		snakeCoordinate.remove(0); //(0,2)is remove
		Point p= al.randomCoordinateWithExclusion(snakeCoordinate);
		assertEquals(0, p.x,"Expecting 0 but received: "+p.x );
		assertEquals(2, p.y,"Expecting 2 but received: "+p.y );
		snakeCoordinate.add(0 , new Point(0,2) ); 
		snakeCoordinate.remove(839); //(29,29)is remove
		p= al.randomCoordinateWithExclusion(snakeCoordinate);
		assertEquals(29, p.x,"Expecting 29 but received: "+p.x );
		assertEquals(29, p.y,"Expecting 29 but received: "+p.y );
		snakeCoordinate.add(0 , new Point(29,29) ); //pool is now empty
		p= al.randomCoordinateWithExclusion(snakeCoordinate);
		assertEquals(0, p.x,"Expecting 0 but received: "+p.x );
		assertEquals(0, p.y,"Expecting 0 but received: "+p.y );
	}
	
	
	//This is a test to determine if the snake is eating itself.
	@Test
	void testSelfEat() {
		snakeCoordinate.add(new Point(5,4));
		snakeCoordinate.add(new Point(4,4));
		snakeCoordinate.add(new Point(3,4));
		snakeCoordinate.add(new Point(2,4));
		snakeCoordinate.add(new Point(1,4));
		snakeCoordinate.add(new Point(0,4));
		al.selfEat(snakeCoordinate);
		assertEquals(2, al.getGameOver(),"gameOver must have the Value 2" );
		snakeCoordinate.clear();
		snakeCoordinate.add(new Point(3,2));
		snakeCoordinate.add(new Point(3,1));
		snakeCoordinate.add(new Point(2,1));
		snakeCoordinate.add(new Point(2,2));
		snakeCoordinate.add(new Point(3,2));
		snakeCoordinate.add(new Point(4,2));
		al.selfEat(snakeCoordinate);
		assertEquals(1, al.getGameOver(),"gameOver must have the Value 1" );
	}
    
}
